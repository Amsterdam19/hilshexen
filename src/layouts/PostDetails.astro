---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import { Picture } from "astro:assets";
import TableOfContents from "@components/TOC.astro";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  heroImage,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  tags,
} = post.data;

const { Content, headings } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin,
).href;
---

<Layout
  title={title}
  author={author}
  description={description}
  ogImage={ogUrl}
  canonicalURL={canonicalURL}
>
  <Header />
  <div class="w-full max-w-[70rem] mx-auto px-4 py-8">
    <button
      class="focus-outline mb-2 w-max flex button"
      onclick="history.back()"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="transition-transform"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Zurück</span>
    </button>
  </div>
  <div id="content">
    <aside class="flex flex-col gap-6 lg:sticky top-[7rem] h-max">
      {
        headings && headings.length > 0 && (
          <nav class="artikleCard">
            <TableOfContents {headings} />
          </nav>
        )
      }
      <div class="artikleCard">
        <h1 class="font-bold mb-3 text-2xl smallH1">Tags</h1>
        <ul class="flex gap-3 flex-wrap">
          {tags.map((tag) => <Tag tag={slugifyStr(tag)} />)}
        </ul>
      </div>
    </aside>

    <main id="main-content" class="artikleCard">
      <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
      <Datetime datetime={pubDatetime} size="lg" className="mt-2 mb-4" />
      <Picture
      class="rounded-[0.75rem] scroll-animation opacity"
      src={heroImage}
      quality="mid"
      formats={["avif", "webp"]}
      alt={"Bild zum Artikel " + title}
    />
      <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
        <Content />
      </article>
    </main>
  </div>
  <div class="flex justify-end max-w-[70rem] mx-auto w-full px-4 my-6">
    <button
      id="back-to-top"
      class="focus-outline flex items-center gap-2 hover:opacity-80 artikleCard !p-4"
    >
    <div class="svgButton" style="background-color: transparent">
      <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90" viewBox="0 0 24 24"><path fill="currentColor" d="M16.88 2.88a1.25 1.25 0 0 0-1.77 0L6.7 11.29a.996.996 0 0 0 0 1.41l8.41 8.41c.49.49 1.28.49 1.77 0s.49-1.28 0-1.77L9.54 12l7.35-7.35c.48-.49.48-1.28-.01-1.77"/></svg>
     
    </div>

      <span>Zurück nach oben</span>
    </button>
  </div>
  <Footer />
</Layout>

<style>
  #content {
    max-width: var(--site_width);
    grid-template-columns: 1fr 2fr;
    @apply mx-auto w-full px-4 flex flex-col lg:grid gap-6;
  }
  .post-title {
    margin-block: 1.5rem;
    font-size: clamp(1.5rem, 3rem, 3.5rem);
    line-height: 1;
    @apply font-semibold;
  }
  .button {
    background-color: rgb(var(--color-accent));
    color: rgb(var(--color-b-w));
    @apply p-2 rounded-[0.6rem];
  }
  .button svg {
    color: rgb(var(--color-b-w));
    fill: rgb(var(--color-b-w));
  }
  .button:hover {
    background-color: rgb(var(--color-btn-hover));
  }
  .button:hover svg {
    @apply -translate-x-1;
  }
  .artikleCard {
    border-radius: clamp(0.5rem, 0.75rem, 1rem);
    box-shadow: rgba(var(--box-shaddow), 0.2) 0px 8px 24px;
    background-color: rgb(var(--color-card));
    @apply p-[4%];
  }
</style>
<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-[99999] h-1 w-full";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent rounded-r-lg";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
